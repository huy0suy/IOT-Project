#include <DHT.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Cấu hình cảm biến
#define DHTPIN D2   // Chân kết nối của DHT11
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#define LDRPIN A0   // Chân analog của LDR

// Cấu hình chân đèn LED
#define LED1 D4
#define LED2 D6
#define LED3 D7
#define LED4 D8
#define LED5 D1

// Thông tin Wi-Fi
const char* ssid = "IphoneXr";
const char* password = "123456789";
const char* mqttServer = "172.20.10.6";

// Thông tin MQTT
const int mqttPort = 1993;
const char* mqttUser = "huy";
const char* mqttPassword = "0123456789";

// Tên topic
const char* dataTopic = "datasensors";
const char* controlLight = "controllight";
const char* lightStatusTopic = "light-status";

// Đối tượng kết nối Wi-Fi và MQTT
WiFiClient espClient;
PubSubClient client(espClient);

void sendLightStatus() {
  // Tạo thông điệp trạng thái đèn (ON/OFF)
  char payload[100];
  snprintf(payload, sizeof(payload), 
           "{\"LED1\": %d, \"LED2\": %d, \"LED3\": %d, \"LED4\": %d, \"LED5\": %d}", 
           digitalRead(LED1), digitalRead(LED2), digitalRead(LED3), digitalRead(LED4), digitalRead(LED5));

  // Gửi trạng thái đèn qua MQTT
  client.publish(lightStatusTopic, payload);
}

void setup() {
  Serial.begin(115200);
  dht.begin();

  // Cấu hình chân đèn LED
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED5, OUTPUT);

  // Tắt các đèn LED ban đầu
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED4, LOW);
  digitalWrite(LED5, LOW);

  // Kết nối Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }
  Serial.println("Wifi connected");

  // Kết nối MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback); // Đặt hàm callback để nhận lệnh MQTT
}

void loop() {
  // Kết nối lại với MQTT broker nếu cần
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Đọc dữ liệu cảm biến
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int ldrValue = analogRead(LDRPIN);
  float lux = (1024.0 - ldrValue);
  float outdoorTemperature = random(15, 35) + random(0, 100) / 100.0; // Từ 15°C đến 35°C

  // Kiểm tra nếu dữ liệu cảm biến không hợp lệ
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Lỗi đọc cảm biến DHT11!");
    return;
  }

  // Hiển thị dữ liệu lên Serial Monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" °C, Humidity: ");
  Serial.print(humidity);
  Serial.print(" %, Light: ");
  Serial.print(lux);
  Serial.print(" lux, Outdoor Temperature: ");
  Serial.print(outdoorTemperature);
  Serial.println(" °C");

  // Định dạng dữ liệu cho MQTT
  char payload[150];
  snprintf(payload, sizeof(payload), 
           "Temperature: %.2f C, Humidity: %.2f %%, Light: %.2f lux, OutdoorTemperature: %.2f C", 
           temperature, humidity, lux, outdoorTemperature);

  // Gửi dữ liệu lên MQTT broker
  client.publish(dataTopic, payload);

  // Gửi trạng thái đèn sau mỗi lần gửi dữ liệu
  sendLightStatus();

  // Đợi 3 giây trước khi lấy dữ liệu lại
  delay(3000);
}

// Hàm callback để xử lý lệnh từ MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  // Kiểm tra nếu lệnh điều khiển đến từ topic "controllight"
  if (String(topic) == controlLight) {
    Serial.print("Lệnh điều khiển nhận được: ");
    Serial.println(message);

    if (message == "Led1_on") {
      digitalWrite(LED1, HIGH);
    } else if (message == "Led1_off") {
      digitalWrite(LED1, LOW);
    } else if (message == "Led2_on") {
      digitalWrite(LED2, HIGH);
    } else if (message == "Led2_off") {
      digitalWrite(LED2, LOW);
    } else if (message == "Led3_on") {
      digitalWrite(LED3, HIGH);
    } else if (message == "Led3_off") {
      digitalWrite(LED3, LOW);
    } else if (message == "Led4_on") {
      digitalWrite(LED4, HIGH);
    } else if (message == "Led4_off") {
      digitalWrite(LED4, LOW);
    } else if (message == "Led5_on") {
      digitalWrite(LED5, HIGH);
    } else if (message == "Led5_off") {
      digitalWrite(LED5, LOW);
    } else if (message == "All_on") {
      digitalWrite(LED1, HIGH);
      digitalWrite(LED2, HIGH);
      digitalWrite(LED3, HIGH);
      digitalWrite(LED4, HIGH);
      digitalWrite(LED5, HIGH);
    } else if (message == "All_off") {
      digitalWrite(LED1, LOW);
      digitalWrite(LED2, LOW);
      digitalWrite(LED3, LOW);
      digitalWrite(LED4, LOW);
      digitalWrite(LED5, LOW);
    }

    // Gửi trạng thái đèn sau khi thực hiện lệnh
    sendLightStatus();
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Đang kết nối MQTT...");
    if (client.connect("ESP8266Client", mqttUser, mqttPassword)) {
      Serial.println("Đã kết nối MQTT");
      client.subscribe(controlLight);  // Đăng ký topic để nhận lệnh điều khiển đèn
    } else {
      Serial.print("Thất bại, rc=");
      Serial.print(client.state());
      Serial.println(". Thử lại sau 5 giây.");
      delay(5000);
    }
  }
}
